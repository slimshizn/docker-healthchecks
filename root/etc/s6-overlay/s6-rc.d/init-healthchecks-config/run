#!/usr/bin/with-contenv bash
# shellcheck shell=bash

lsiown -R abc:abc  \
    /app/healthchecks/hc/api/migrations

if [[ ! -f "/config/local_settings.py" ]]; then
    touch /config/local_settings.py
fi

if [[ -z ${SITE_ROOT} ]] && ! grep -q "^SITE_ROOT" /config/local_settings.py; then
    echo "No SITE_ROOT provided, halting init"
    sleep infinity
elif [[ -z ${SITE_ROOT} ]] && grep -q "^SITE_ROOT" /config/local_settings.py; then
    SITE_ROOT=$(grep -Po "^SITE_ROOT\s*=\s*\K(.*)" /config/local_settings.py | tr -d '"')
fi

# Need to inject SITE_ROOT into CSRF_TRUSTED_ORIGINS if not specified by the user because it defaults to an empty list
if [[ -z ${CSRF_TRUSTED_ORIGINS} ]] && ! grep -q "^CSRF_TRUSTED_ORIGINS" /config/local_settings.py; then
    CSRF_TRUSTED_ORIGINS=[\"${SITE_ROOT}\"]
    echo "${CSRF_TRUSTED_ORIGINS}" > /run/s6/container_environment/CSRF_TRUSTED_ORIGINS
fi

if [[ -z ${SECRET_KEY} ]] && ! grep -q "^SECRET_KEY" /config/local_settings.py; then
    SECRET_KEY=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 32; echo '')
    echo "SECRET_KEY = \"${SECRET_KEY}\"" >> /config/local_settings.py
    echo "*** No SECRET_KEY specified so a random one has been generated an written to /config/local_settings.py **"
fi

if [[ ! -L "/app/healthchecks/hc/local_settings.py" ]]; then
    ln -s /config/local_settings.py /app/healthchecks/hc/local_settings.py
fi

if [[ ! -L "/app/healthchecks/hc.sqlite" ]]; then
    ln -s /config/hc.sqlite /app/healthchecks/hc.sqlite
fi

cp /defaults/uwsgi.ini /app/healthchecks/uwsgi.ini

cd /app/healthchecks || exit

python3 ./manage.py makemigrations

# permissions
lsiown -R abc:abc \
    /config

s6-setuidgid abc python3 ./manage.py migrate

if [[ -n "$SUPERUSER_EMAIL" ]] && [[ -n "$SUPERUSER_PASSWORD" ]]; then
cat << EOF | s6-setuidgid abc python3 /app/healthchecks/manage.py shell
from django.contrib.auth.models import User;
from hc.accounts.views import _make_user;

password = '$SUPERUSER_PASSWORD';
email = '$SUPERUSER_EMAIL';

if User.objects.filter(email=email).count()==0:
    user = _make_user(email);
    user.set_password(password);
    user.is_staff = True;
    user.is_superuser = True;
    user.save();
    print('Superuser created.');
else:
    print('Superuser creation skipped. Already exists.');
EOF
fi
